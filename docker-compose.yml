---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-init:
    image: confluentinc/cp-kafka:6.2.0
    restart: on-failure
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TOPIC: profile
    volumes:
      - "./config/kafka-broker-init/init.sh:/init.sh:ro"
    command: "/init.sh"

  elasticsearch:
    image: elasticsearch:7.13.3
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      discovery.type: single-node
      ELASTIC_PASSWORD: changeme
      xpack.security.enabled: "true"
      ES_JAVA_OPTS: -Xms100m -Xmx512m
    volumes:
      - elastic-data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:7.13.3
    ports:
      - 5601:5601
    volumes:
      - "./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
    depends_on:
      - elasticsearch


  logstash:
    image: logstash:7.13.3
    ports:
      - 9600:9600
    volumes:
      - "./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro"
      - "./config/logstash/pipeline:/usr/share/logstash/pipeline:ro"
    depends_on:
      - elasticsearch
      - kafka
      - zookeeper

  db:
    image: postgres:10.17
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: root
      POSTGRES_DB: postgres
      WEB_DB: auth
      WEB_USER: web_ms
      WEB_PASSWORD: pass
      SERVICE_DB: goodex_data
      SERVICE_USER: service_ms
      SERVICE_PASSWORD: pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - "./config/postgresql/create_service_db.sh:/docker-entrypoint-initdb.d/create_service_db.sh:ro"
      - "./config/postgresql/create_web_db.sh:/docker-entrypoint-initdb.d/create_web_db.sh:ro"
    ports:
      - 65432:5432

  service:
    image: goodex_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db/goodex_data
      SPRING_DATASOURCE_USERNAME: service_ms
      SPRING_DATASOURCE_PASSWORD: pass
    depends_on:
      - db
      - kafka
    ports:
      - 8080:8080

  web:
    image: goodex_web
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db/auth
      SPRING_DATASOURCE_USERNAME: web_ms
      SPRING_DATASOURCE_PASSWORD: pass
      UPLOAD_PATH: /opt/web/upload
    depends_on:
      - db
      - service
    ports:
      - 80:8080
    volumes:
      - web-image-upload-data:/opt/web/upload

  sonar:
    image: sonarqube:8.9.1-community
    restart: unless-stopped
    environment:
      ES_JAVA_HOME: /opt/java/openjdk/
      sonar.search.javaOpts: -Xms20m -Xmx200m
      JAVA_HOME: /opt/java/openjdk/
      discovery.type: single-node
    ports:
      - 9000:9000
    #command: /bin/sh -c '/opt/java/openjdk/bin/java --version'

volumes:
  web-image-upload-data:
    driver: local
  postgresql-data:
    driver: local
  elastic-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local